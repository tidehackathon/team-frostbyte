// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tide.Data.Ef;

#nullable disable

namespace Tide.Data.Ef.Migrations
{
    [DbContext(typeof(TideContext))]
    [Migration("20230223003251_InitMig")]
    partial class InitMig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Tide.Data.Models.Capabilities.Capability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NationId");

                    b.ToTable("Capabilities");
                });

            modelBuilder.Entity("Tide.Data.Models.Capabilities.CapabilityCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("BaseInteroperability")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CapabilityId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentInteroperability")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FailureRate")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Maturity")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<int>("SuccessRate")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CapabilityId");

                    b.ToTable("CapabilityCicles");
                });

            modelBuilder.Entity("Tide.Data.Models.Capabilities.CapabilityDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CapabilityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CapabilityId")
                        .IsUnique();

                    b.ToTable("CapabilityDescription");
                });

            modelBuilder.Entity("Tide.Data.Models.Capabilities.CapabilityFaMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CapabilityId")
                        .HasColumnType("int");

                    b.Property<int>("FaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CapabilityId");

                    b.HasIndex("FaId");

                    b.ToTable("CapabilityFaMap");
                });

            modelBuilder.Entity("Tide.Data.Models.Charts.Anomalies.TtYearAnomaly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FaId")
                        .HasColumnType("int");

                    b.Property<string>("FaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ObjectiveId")
                        .HasColumnType("int");

                    b.Property<string>("ObjectiveName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FaId");

                    b.HasIndex("ObjectiveId");

                    b.HasIndex("TemplateId");

                    b.ToTable("TtYearAnomalies");
                });

            modelBuilder.Entity("Tide.Data.Models.Domains.OperationalDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationalDomains");
                });

            modelBuilder.Entity("Tide.Data.Models.Domains.OperationalDomainCapabilityMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CapabilityId")
                        .HasColumnType("int");

                    b.Property<int>("DomainId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CapabilityId");

                    b.HasIndex("DomainId");

                    b.ToTable("OperationalDomainCapabilityMap");
                });

            modelBuilder.Entity("Tide.Data.Models.Duties.Duty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Duties");
                });

            modelBuilder.Entity("Tide.Data.Models.Duties.DutyCapabilityMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CapabilityId")
                        .HasColumnType("int");

                    b.Property<int>("DutyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CapabilityId");

                    b.HasIndex("DutyId");

                    b.ToTable("DutyCapabilityMap");
                });

            modelBuilder.Entity("Tide.Data.Models.FA.FocusArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FocusAreas");
                });

            modelBuilder.Entity("Tide.Data.Models.FA.FocusAreaCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FocusAreaId")
                        .HasColumnType("int");

                    b.Property<decimal>("Interoperability")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FocusAreaId");

                    b.ToTable("FocusAreaCycles");
                });

            modelBuilder.Entity("Tide.Data.Models.Issues.IssueCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("Tide.Data.Models.Issues.IssueTestCaseMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IssueId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.HasIndex("TestId");

                    b.ToTable("IssueTestCaseMap");
                });

            modelBuilder.Entity("Tide.Data.Models.Nation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nations");
                });

            modelBuilder.Entity("Tide.Data.Models.Objectives.Objective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Objectives");
                });

            modelBuilder.Entity("Tide.Data.Models.Objectives.ObjectiveCapabilityMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CapabilityId")
                        .HasColumnType("int");

                    b.Property<decimal>("InteroperabilityScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ObjectiveId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CapabilityId");

                    b.HasIndex("ObjectiveId");

                    b.ToTable("ObjectiveCapabilityMap");
                });

            modelBuilder.Entity("Tide.Data.Models.Objectives.ObjectiveCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("InteroperabilityScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ObjectiveId")
                        .HasColumnType("int");

                    b.Property<int>("Scope")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ObjectiveId");

                    b.ToTable("ObjectiveCycles");
                });

            modelBuilder.Entity("Tide.Data.Models.Objectives.ObjectiveDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ObjectiveId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ObjectiveId")
                        .IsUnique();

                    b.ToTable("ObjectiveDescription");
                });

            modelBuilder.Entity("Tide.Data.Models.Objectives.ObjectiveFaMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FaId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectiveId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FaId");

                    b.HasIndex("ObjectiveId");

                    b.ToTable("ObjectiveFaMap");
                });

            modelBuilder.Entity("Tide.Data.Models.Objectives.ObjectiveTcMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ObjectiveId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ObjectiveId");

                    b.HasIndex("TestId");

                    b.ToTable("ObjectiveTcMap");
                });

            modelBuilder.Entity("Tide.Data.Models.Objectives.ObjectiveTtMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ObjectiveId")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ObjectiveId");

                    b.HasIndex("TemplateId");

                    b.ToTable("ObjectiveTtMap");
                });

            modelBuilder.Entity("Tide.Data.Models.Standards.Standard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Standards");
                });

            modelBuilder.Entity("Tide.Data.Models.Standards.StandardCapabilityMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CapabilityId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<decimal>("InteroperabilityScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StandardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CapabilityId");

                    b.HasIndex("StandardId");

                    b.ToTable("StandardCapabilityMap");
                });

            modelBuilder.Entity("Tide.Data.Models.Standards.StandardObjectiveMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ObjectiveId")
                        .HasColumnType("int");

                    b.Property<int>("StandardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ObjectiveId");

                    b.HasIndex("StandardId");

                    b.ToTable("StandardObjectiveMap");
                });

            modelBuilder.Entity("Tide.Data.Models.Standards.StandardTtMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("StandardId")
                        .HasColumnType("int");

                    b.Property<int>("TestTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StandardId");

                    b.HasIndex("TestTemplateId");

                    b.ToTable("StandardTtMap");
                });

            modelBuilder.Entity("Tide.Data.Models.Tcs.TestCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParticipantsCount")
                        .HasColumnType("int");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<bool>("Shortfall")
                        .HasColumnType("bit");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Tide.Data.Models.Tcs.TestCaseParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CapabilityId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CapabilityId");

                    b.HasIndex("TestId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Tide.Data.Models.Tts.TestTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Maturity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("Tide.Data.Models.Tts.TestTemplateCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Anomaly")
                        .HasColumnType("int");

                    b.Property<int?>("DiffusionId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiffusionSimilarity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Similarity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TestTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("TestsCount")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiffusionId");

                    b.HasIndex("TestTemplateId");

                    b.ToTable("TemplateCycles");
                });

            modelBuilder.Entity("Tide.Data.Models.Tts.TestTemplateDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Preconditions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId")
                        .IsUnique();

                    b.ToTable("TemplateDescriptions");
                });

            modelBuilder.Entity("Tide.Data.Models.Tts.TestTemplateResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Interoperability")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Limited")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Success")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId")
                        .IsUnique();

                    b.ToTable("TemplateResults");
                });

            modelBuilder.Entity("Tide.Data.Models.Capabilities.Capability", b =>
                {
                    b.HasOne("Tide.Data.Models.Nation", "Nation")
                        .WithMany("Capabilities")
                        .HasForeignKey("NationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nation");
                });

            modelBuilder.Entity("Tide.Data.Models.Capabilities.CapabilityCycle", b =>
                {
                    b.HasOne("Tide.Data.Models.Capabilities.Capability", "Capability")
                        .WithMany("Cycles")
                        .HasForeignKey("CapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capability");
                });

            modelBuilder.Entity("Tide.Data.Models.Capabilities.CapabilityDescription", b =>
                {
                    b.HasOne("Tide.Data.Models.Capabilities.CapabilityCycle", "Capability")
                        .WithOne("Description")
                        .HasForeignKey("Tide.Data.Models.Capabilities.CapabilityDescription", "CapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capability");
                });

            modelBuilder.Entity("Tide.Data.Models.Capabilities.CapabilityFaMap", b =>
                {
                    b.HasOne("Tide.Data.Models.Capabilities.CapabilityCycle", "Capability")
                        .WithMany("Fas")
                        .HasForeignKey("CapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tide.Data.Models.FA.FocusAreaCycle", "FocusArea")
                        .WithMany("Capabilities")
                        .HasForeignKey("FaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capability");

                    b.Navigation("FocusArea");
                });

            modelBuilder.Entity("Tide.Data.Models.Charts.Anomalies.TtYearAnomaly", b =>
                {
                    b.HasOne("Tide.Data.Models.FA.FocusArea", "Fa")
                        .WithMany()
                        .HasForeignKey("FaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tide.Data.Models.Objectives.ObjectiveCycle", "Objective")
                        .WithMany()
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tide.Data.Models.Tts.TestTemplateCycle", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fa");

                    b.Navigation("Objective");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Tide.Data.Models.Domains.OperationalDomainCapabilityMap", b =>
                {
                    b.HasOne("Tide.Data.Models.Capabilities.CapabilityCycle", "Capability")
                        .WithMany("Domains")
                        .HasForeignKey("CapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tide.Data.Models.Domains.OperationalDomain", "Domain")
                        .WithMany("Capabilities")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capability");

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("Tide.Data.Models.Duties.DutyCapabilityMap", b =>
                {
                    b.HasOne("Tide.Data.Models.Capabilities.CapabilityCycle", "Capability")
                        .WithMany("Duties")
                        .HasForeignKey("CapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tide.Data.Models.Duties.Duty", "Duty")
                        .WithMany("Capabilities")
                        .HasForeignKey("DutyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capability");

                    b.Navigation("Duty");
                });

            modelBuilder.Entity("Tide.Data.Models.FA.FocusAreaCycle", b =>
                {
                    b.HasOne("Tide.Data.Models.FA.FocusArea", "FocusArea")
                        .WithMany("Cicles")
                        .HasForeignKey("FocusAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FocusArea");
                });

            modelBuilder.Entity("Tide.Data.Models.Issues.IssueTestCaseMap", b =>
                {
                    b.HasOne("Tide.Data.Models.Issues.IssueCategory", "Issue")
                        .WithMany("Tests")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tide.Data.Models.Tcs.TestCase", "Test")
                        .WithMany("Issues")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Tide.Data.Models.Objectives.ObjectiveCapabilityMap", b =>
                {
                    b.HasOne("Tide.Data.Models.Capabilities.CapabilityCycle", "Capability")
                        .WithMany("Objectives")
                        .HasForeignKey("CapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tide.Data.Models.Objectives.ObjectiveCycle", "Objective")
                        .WithMany("Capabilities")
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capability");

                    b.Navigation("Objective");
                });

            modelBuilder.Entity("Tide.Data.Models.Objectives.ObjectiveCycle", b =>
                {
                    b.HasOne("Tide.Data.Models.Objectives.Objective", "Objective")
                        .WithMany("Cycles")
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objective");
                });

            modelBuilder.Entity("Tide.Data.Models.Objectives.ObjectiveDescription", b =>
                {
                    b.HasOne("Tide.Data.Models.Objectives.ObjectiveCycle", "Objective")
                        .WithOne("Description")
                        .HasForeignKey("Tide.Data.Models.Objectives.ObjectiveDescription", "ObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objective");
                });

            modelBuilder.Entity("Tide.Data.Models.Objectives.ObjectiveFaMap", b =>
                {
                    b.HasOne("Tide.Data.Models.FA.FocusAreaCycle", "FocusArea")
                        .WithMany("Objectives")
                        .HasForeignKey("FaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tide.Data.Models.Objectives.ObjectiveCycle", "Objective")
                        .WithMany("Fas")
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FocusArea");

                    b.Navigation("Objective");
                });

            modelBuilder.Entity("Tide.Data.Models.Objectives.ObjectiveTcMap", b =>
                {
                    b.HasOne("Tide.Data.Models.Objectives.ObjectiveCycle", "Objective")
                        .WithMany("Tests")
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tide.Data.Models.Tcs.TestCase", "Test")
                        .WithMany("Objectives")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objective");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Tide.Data.Models.Objectives.ObjectiveTtMap", b =>
                {
                    b.HasOne("Tide.Data.Models.Objectives.ObjectiveCycle", "Objective")
                        .WithMany("Templates")
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tide.Data.Models.Tts.TestTemplateCycle", "Template")
                        .WithMany("Objectives")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objective");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Tide.Data.Models.Standards.StandardCapabilityMap", b =>
                {
                    b.HasOne("Tide.Data.Models.Capabilities.CapabilityCycle", "Capability")
                        .WithMany("Standards")
                        .HasForeignKey("CapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tide.Data.Models.Standards.Standard", "Standard")
                        .WithMany("Capabilities")
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capability");

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("Tide.Data.Models.Standards.StandardObjectiveMap", b =>
                {
                    b.HasOne("Tide.Data.Models.Objectives.ObjectiveCycle", "Objective")
                        .WithMany("Standards")
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tide.Data.Models.Standards.Standard", "Standard")
                        .WithMany("Objectives")
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objective");

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("Tide.Data.Models.Standards.StandardTtMap", b =>
                {
                    b.HasOne("Tide.Data.Models.Standards.Standard", "Standard")
                        .WithMany("Templates")
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tide.Data.Models.Tts.TestTemplate", "TestTemplate")
                        .WithMany("Standards")
                        .HasForeignKey("TestTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Standard");

                    b.Navigation("TestTemplate");
                });

            modelBuilder.Entity("Tide.Data.Models.Tcs.TestCase", b =>
                {
                    b.HasOne("Tide.Data.Models.Tts.TestTemplateCycle", "Template")
                        .WithMany("Tests")
                        .HasForeignKey("TemplateId");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Tide.Data.Models.Tcs.TestCaseParticipant", b =>
                {
                    b.HasOne("Tide.Data.Models.Capabilities.CapabilityCycle", "Capability")
                        .WithMany("Tests")
                        .HasForeignKey("CapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tide.Data.Models.Tcs.TestCase", "Test")
                        .WithMany("Participants")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capability");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Tide.Data.Models.Tts.TestTemplateCycle", b =>
                {
                    b.HasOne("Tide.Data.Models.Tts.TestTemplateCycle", "Diffusion")
                        .WithMany("Duplicates")
                        .HasForeignKey("DiffusionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Tide.Data.Models.Tts.TestTemplate", "Template")
                        .WithMany("Cycles")
                        .HasForeignKey("TestTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diffusion");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Tide.Data.Models.Tts.TestTemplateDescription", b =>
                {
                    b.HasOne("Tide.Data.Models.Tts.TestTemplate", "Template")
                        .WithOne("Description")
                        .HasForeignKey("Tide.Data.Models.Tts.TestTemplateDescription", "TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Tide.Data.Models.Tts.TestTemplateResult", b =>
                {
                    b.HasOne("Tide.Data.Models.Tts.TestTemplate", "Template")
                        .WithOne("Result")
                        .HasForeignKey("Tide.Data.Models.Tts.TestTemplateResult", "TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Tide.Data.Models.Capabilities.Capability", b =>
                {
                    b.Navigation("Cycles");
                });

            modelBuilder.Entity("Tide.Data.Models.Capabilities.CapabilityCycle", b =>
                {
                    b.Navigation("Description");

                    b.Navigation("Domains");

                    b.Navigation("Duties");

                    b.Navigation("Fas");

                    b.Navigation("Objectives");

                    b.Navigation("Standards");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Tide.Data.Models.Domains.OperationalDomain", b =>
                {
                    b.Navigation("Capabilities");
                });

            modelBuilder.Entity("Tide.Data.Models.Duties.Duty", b =>
                {
                    b.Navigation("Capabilities");
                });

            modelBuilder.Entity("Tide.Data.Models.FA.FocusArea", b =>
                {
                    b.Navigation("Cicles");
                });

            modelBuilder.Entity("Tide.Data.Models.FA.FocusAreaCycle", b =>
                {
                    b.Navigation("Capabilities");

                    b.Navigation("Objectives");
                });

            modelBuilder.Entity("Tide.Data.Models.Issues.IssueCategory", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Tide.Data.Models.Nation", b =>
                {
                    b.Navigation("Capabilities");
                });

            modelBuilder.Entity("Tide.Data.Models.Objectives.Objective", b =>
                {
                    b.Navigation("Cycles");
                });

            modelBuilder.Entity("Tide.Data.Models.Objectives.ObjectiveCycle", b =>
                {
                    b.Navigation("Capabilities");

                    b.Navigation("Description");

                    b.Navigation("Fas");

                    b.Navigation("Standards");

                    b.Navigation("Templates");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Tide.Data.Models.Standards.Standard", b =>
                {
                    b.Navigation("Capabilities");

                    b.Navigation("Objectives");

                    b.Navigation("Templates");
                });

            modelBuilder.Entity("Tide.Data.Models.Tcs.TestCase", b =>
                {
                    b.Navigation("Issues");

                    b.Navigation("Objectives");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Tide.Data.Models.Tts.TestTemplate", b =>
                {
                    b.Navigation("Cycles");

                    b.Navigation("Description");

                    b.Navigation("Result");

                    b.Navigation("Standards");
                });

            modelBuilder.Entity("Tide.Data.Models.Tts.TestTemplateCycle", b =>
                {
                    b.Navigation("Duplicates");

                    b.Navigation("Objectives");

                    b.Navigation("Tests");
                });
#pragma warning restore 612, 618
        }
    }
}
